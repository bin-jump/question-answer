<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhang.ddd.infrastructure.persistence.mybatis.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        <id column="id" property="id" />
        <result column="version" property="version" />
        <result column="name" property="name" />
        <result column="password"  property="password" />
        <result column="email" property="email" />
        <result column="avatar_url"  property="avatarUrl" />
        <result column="age" property="age" />
        <result column="gender" property="gender" />
        <result column="created" property="created" />
        <result column="description" property="description" />
        <result column="question_count" property="questionCount" />
        <result column="answer_count" property="answerCount" />
        <result column="follower_count" property="followerCount" />
        <result column="followee_count" property="followeeCount" />
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        insert into user (id, version, name, password, email, avatar_url, age, gender,
                          created, description, question_count, answer_count, follower_count, followee_count
        )
        values (#{id}, #{version}, #{name}, #{password}, #{email}, #{avatarUrl}, #{age}, #{gender},
                #{created}, #{description}, #{questionCount}, #{answerCount}, #{followerCount}, #{followeeCount}
               )
    </insert>

    <update id="update" parameterType="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        update user
        set version = version + 1,
            name = #{name},
            password = #{password},
            email = #{email},
            avatar_url = #{avatarUrl},
            age = #{age},
            gender = #{gender},
            description = #{description},

            question_count = #{questionCount},
            answer_count = #{answerCount},
            follower_count = #{followerCount},
            followee_count = #{followeeCount}

        where id = #{id} and version = #{version}
    </update>

    <select id="findByName" resultMap="BaseResultMap" resultType="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        select id, version, name, password, email, avatar_url, age, gender,
               created, description, question_count, answer_count, follower_count, followee_count
        from user
        where name = #{name}
    </select>

    <select id="findById" resultMap="BaseResultMap" resultType="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        select id, version, name, password, email, avatar_url, age, gender,
               created, description, question_count, answer_count, follower_count, followee_count
        from user
        where id = #{id}
    </select>

    <select id="findByIds" resultMap="BaseResultMap" resultType="com.zhang.ddd.infrastructure.persistence.po.UserPO">
        select id, version, name, password, email, avatar_url, age, gender,
               created, description, question_count, answer_count, follower_count, followee_count
        from user
        <choose>
            <when test="userIds != null and userIds.size() > 0">
                where id in
                <foreach item="userId" collection="userIds" separator="," open="(" close=")">
                    #{userId}
                </foreach>
            </when>
            <otherwise>
                where 1=2
            </otherwise>
        </choose>
    </select>

</mapper>
